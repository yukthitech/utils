<test-data xmlns:r="/fw/ccg/XMLBeanParser">
	<r:exprPattern enabled="false"/>
	
	<jel-test-bean name="conditionBasedRemovalInMap">
		<context>
			{
				"libraries": {
					"Justbooks": {"open": true},
					"Imagine": {"open": false}
				}
			}
		</context>
		<template>
			{
				"Justbooks": {
					"@condition": "libraries.Justbooks.open",
					"desc": "Library is open"
				},
				"Imagine": {
					"@condition": "libraries.Imagine.open",
					"desc": "Library is open"
				}
			}
		</template>
		<expectedResult>
			{
				"Justbooks": {
					"desc": "Library is open"
				}
			}
		</expectedResult>
	</jel-test-bean>

	<jel-test-bean name="exprInKey">
		<context>
			{
				"libraries": {
					"Justbooks": {"name": "Justbooks", "open": true},
					"Imagine": {"name": "Imagine", "open": false}
				}
			}
		</context>

		<template>
			{
				"Justbooks-${libraries.Justbooks.open?c}": {
					"status": "${libraries.Justbooks.open?c}"
				},
				"@fmarker: mapValues(libraries)[1].name": {
					"status": "${libraries.Imagine.open?c}"
				}
			}
		</template>
		<expectedResult>
			{
				"Justbooks-true": {
					"status": "true"
				},
				"Imagine": {
					"status": "false"
				}
			}
		</expectedResult>
	</jel-test-bean>

	<jel-test-bean name="conditionBasedRemovalInList">
		<context>
			{
				"libraries": {
					"Justbooks": {
						"open": true,
						"books": [
							{"title": "Davinci Code", "author": "Dan Brown", "type": "Science Fiction", "copyCount": 3},
							{"title": "Sphere", "author": "Michel Crihton", "type": "Science Fiction", "copyCount": 0}
						]
					},
					"Imagine": {
						"open": false,
						"books": [
							{"title": "Shiva Triology", "author": "Amit Shah", "type": "Mythology Fiction", "copyCount": 10},
							{"title": "Dark Psychology", "author": "Xyz", "type": "Psychology", "copyCount": 1}
						]
					}
				}
			}
		</context>
		
		<template>
			{
				"emptyList": [],
				"listWithNoString": [100, 200],
				"listWithNoCond": ["@fmarker: sizeOf(libraries.Justbooks.books)", 20],
				"listWithPositiveCond": ["@condition: libraries.Justbooks.open", 1000, {"a": "b"}],
				"listWithNegativeCond": ["@condition: libraries.Imagine.open", 1000, {"a": "b"}]
			}
		</template>
		<expectedResult>
			{
				"emptyList": [],
				"listWithNoString": [100, 200],
				"listWithNoCond": [2, 20],
				"listWithPositiveCond": [1000, {"a": "b"}]
			}
		</expectedResult>
	</jel-test-bean>

	<jel-test-bean name="valueKey">
		<context>
			{
				"libraries": {
					"Justbooks": {"name": "Justbooks", "open": true},
					"Imagine": {"name": "Imagine", "open": false}
				}
			}
		</context>

		<template>
			{
				"mapWithString": {
					"@condition": "libraries.Justbooks.open",
					"@value": "Enabled",
					"extraParam": 1
				},
				"mapWithNonString": {
					"@condition": "libraries.Justbooks.open",
					"@value": 100,
					"extraParam": 1
				},
				"list": [
					{
						"@condition": "libraries.Justbooks.open",
						"@value": "@fmarker: libraries.Justbooks.name",
						"extraParam": 1
					},
					100
				],
				"prodStack": {
					"@condition": "libraries.Imagine.open",
					"@value": "Enabled"
				}
			}
		</template>
		<expectedResult>
			{
				"mapWithString": "Enabled",
				"mapWithNonString": 100,
				"list": ["Justbooks", 100]
			}
		</expectedResult>
	</jel-test-bean>

	<jel-test-bean name="conditionBasedRemovalInList">
		<context>
			{
				"libraries": {
					"Justbooks": {"open": true},
					"Imagine": {"open": false}
				}
			}
		</context>
		
		<template>
			[
				{
					"@condition": "libraries.Justbooks.open",
					"desc": "Just books is open"
				},
				{
					"@condition": "libraries.Imagine.open",
					"desc": "Imagine is open"
				},
				{
					"desc": "This is a extra lib"
				}
			]
		</template>
		<expectedResult>
			[
				{
					"desc": "Just books is open"
				},
				{
					"desc": "This is a extra lib"
				}
			]
		</expectedResult>
	</jel-test-bean>

	<jel-test-bean name="loopAndExpressions">
		<context>
			{
				"libraries": {
					"Justbooks": {
						"name": "Justbooks", 
						"open": true,
						"books": [
							{"title": "Davinci Code", "author": "Dan Brown", "type": "Science Fiction", "copyCount": 3},
							{"title": "Sphere", "author": "Michel Crihton", "type": "Science Fiction", "copyCount": 0}
						]
					},
					"Imagine": {
						"name": "Imagine", 
						"open": false,
						"books": [
							{"title": "Shiva Triology", "author": "Amit Shah", "type": "Mythology Fiction", "copyCount": 10},
							{"title": "Let Us C", "author": "Yeshwant Kanetkar", "type": "Technology", "copyCount": 0},
							{"title": "Dark Psychology", "author": "Xyz", "type": "Psychology", "copyCount": 1}
						]
					}
				}
			}
		</context>
		
		<template>
			{
				"bookNames": "@xpathMulti: /libraries/Justbooks/books//title",
				"copyCount": "@xpath: /libraries/Justbooks/books[1]/copyCount",
				"allDocCounts": ["@fmarker: sizeOf(libraries.Justbooks.books)", "@fmarker: sizeOf(libraries.Imagine.books)"],
				"Justbooks": [
					{
						"@for-each(book)": "libraries.Justbooks.books",
						"name": "${book.title}",
						"desc": "Type: ${book.type}, author: ${book.author}"
					}
				],
				"Imagine": [
					{
						"@for-each(book)": "libraries.Imagine.books",
						"@for-each-condition": "book.copyCount gt 0",
						"name": "${book.title}",
						"desc": "Type: ${book.type}, author: ${book.author}"
					}
				]
			}
		</template>
		<expectedResult>
			{
				"bookNames": ["Davinci Code", "Sphere"],
				"copyCount": 3,
				"allDocCounts": [2, 3],
				"Justbooks": [
					{ "name": "Davinci Code", "desc": "Type: Science Fiction, author: Dan Brown" },
					{ "name": "Sphere", "desc": "Type: Science Fiction, author: Michel Crihton" }
				],
				"Imagine": [
					{ "name": "Shiva Triology", "desc": "Type: Mythology Fiction, author: Amit Shah" },
					{ "name": "Dark Psychology", "desc": "Type: Psychology, author: Xyz" }
				]
			}
		</expectedResult>
	</jel-test-bean>

	<jel-test-bean name="loopForMaps">
		<context>
			{
				"libraries": {
					"Justbooks": {
						"open": true,
						"books": [
							{"title": "Davinci Code", "author": "Dan Brown", "type": "Science Fiction", "copyCount": 3},
							{"title": "Sphere", "author": "Michel Crihton", "type": "Science Fiction", "copyCount": 0}
						]
					},
					"Imagine": {
						"open": false,
						"books": [
							{"title": "Shiva Triology", "author": "Amit Shah", "type": "Mythology Fiction", "copyCount": 10},
							{"title": "Let Us C", "author": "Yeshwant Kanetkar", "type": "Technology", "copyCount": 0},
							{"title": "Dark Psychology", "author": "Xyz", "type": "Psychology", "copyCount": 1}
						]
					}
				}
			}
		</context>
		
		<template>
			{
				"Justbooks": {
					"@fmarker: book.title": {
						"@for-each(book)": "libraries.Justbooks.books",
						"copyCount": "@fmarker: book.copyCount"
					}
				},
				"Imagine": {
					"@fmarker: book.title": {
						"@for-each(book)": "libraries.Imagine.books",
						"@for-each-condition": "book.copyCount gt 0",
						"copyCount": "@fmarker: book.copyCount"
					}
				}
			}
		</template>
		<expectedResult>
			{
				"Justbooks": {
					"Davinci Code": { "copyCount": 3 },
					"Sphere": { "copyCount": 0 }
				},
				"Imagine": {
					"Shiva Triology": { "copyCount": 10 },
					"Dark Psychology": { "copyCount": 1 }
				}
			}
		</expectedResult>
	</jel-test-bean>
	
	<jel-test-bean name="nullAndEmptyListRefInLoop">
		<context>
			{
				"nullList": null,
				"emptyList": [],
				"someList": [1, 2, 3]
			}
		</context>
		
		<template>
			{
				"list1": [{
					"@for-each(elem)": "nullList",
					"val": "${elem}"
				}],
				"list2": [{
					"@for-each(elem)": "emptyList",
					"val": "${elem}"
				}],
				"list3": [{
					"@for-each(elem)": "someList",
					"val": "${elem}"
				}]
			}
		</template>
		<expectedResult>
			{
				"list1": [],
				"list2": [],
				"list3": [
					{"val": "1"}, {"val": "2"}, {"val": "3"}
				]
			}
		</expectedResult>
	</jel-test-bean>

	<jel-test-bean name="setExpressions">
		<context>
			{
				"libraries": {
					"Justbooks": {
						"name": "Justbooks",
						"open": true,
						"books": [
							{"title": "Davinci Code", "author": "Dan Brown", "type": "Science Fiction", "copyCount": 3},
							{"title": "Sphere", "author": "Michel Crihton", "type": "Science Fiction", "copyCount": 0}
						]
					},
					"Imagine": {
						"name": "Imagine",
						"open": false,
						"books": [
							{"title": "Shiva Triology", "author": "Amit Shah", "type": "Mythology Fiction", "copyCount": 10},
							{"title": "Let Us C", "author": "Yeshwant Kanetkar", "type": "Technology", "copyCount": 0},
							{"title": "Dark Psychology", "author": "Xyz", "type": "Psychology", "copyCount": 1}
						]
					}
				}
			}
		</context>

		<template>
			{
				"list": [
					100,
					{
						"@set(secondLib)": "@xpath: /libraries/Imagine/name"
					}, 
					200
				],
				"map": {
					"key1": "val1",
					
					"@set(libJb)": {
						"bookNames": "@xpathMulti: /libraries/Justbooks/books//title"
					},
					
					"key2": "@fmarker: libraries.Imagine.books[1].title"
				},
				
				"names": "@fmarker: libJb.bookNames",
				"library": "@fmarker: secondLib"
				
			}
		</template>
		<expectedResult>
			{
				"list": [100, 200],
				"map": {
					"key1": "val1",
					"key2": "Let Us C"
				},
				
				"names": ["Davinci Code", "Sphere"],
				"library": "Imagine"
				
			}
		</expectedResult>
	</jel-test-bean>

	<jel-test-bean name="jsonExpressions">
		<context>
			{
				"libraries": {
					"Justbooks": {"name": "Justbooks", "open": true},
					"Imagine": {"name": "Imagine", "open": false},
					"testLib": {}
				}
			}
		</context>
		
		<template>
			{
				"result": {
					"@value": {
						"someVal": 1,
						"libNames": "@xpathMulti: /libraries/Justbooks//name"
					},
					
					"@transform": "@fmarker: toJson(thisValue)"
					
				}
			}
		</template>
		<expectedResult>
			{
				"result": "{\"someVal\":1,\"libNames\":[\"Justbooks\"]}"
			}
		</expectedResult>
	</jel-test-bean>

	<jel-test-bean name="resLoadingWithExpr">
		<context>
			{
				"ckey1": "cval"
			}
		</context>
		
		<template>
			{
				"result": {
					"@resource": "/res-file.txt",
					"@resParams": {
						"key1": "val1"
					}
				}
			}
		</template>
		<expectedResult>
			{
				"result": "This is simple content with param-value=val1 and context-value=cval"
			}
		</expectedResult>
	</jel-test-bean>

	<jel-test-bean name="resLoadingNoExpr">
		<context>
			{
				"ckey1": "cval"
			}
		</context>

		<template>
			{
				"result": {
					"@resource": "/res-file.txt",
					"@expressions": false,
					"@resParams": {
						"key1": "val1"
					}
				}
			}
		</template>
		<expectedResult>
			{
				"result": "This is simple content with param-value=${resParams.key1} and context-value=${ckey1}"
			}
		</expectedResult>
	</jel-test-bean>

	<jel-test-bean name="includeResourceInMap">
		<context>
			{
				"ckey1": "cval1",
				"ckey2": "cval2"
			}
		</context>

		<template>
			{
				"key1": "@fmarker: ckey1",
				"extra": {"@includeResource": "/include-res.json"},
				"key2": "@fmarker: ckey2"
			}
		</template>
		<expectedResult>
			{
				"key1": "cval1",
				"extra": {
					"skey1": "cval1",
					"arr": [1, 2, 3, 4]
				},
				"key2": "cval2"
			}
		</expectedResult>
	</jel-test-bean>

	<jel-test-bean name="includeWithReplace">
		<context>
			{
				"ckey1": "cval1",
				"ckey2": "cval2"
			}
		</context>

		<template>
			{
				"key1": "@fmarker: ckey1",
				"@replace(extra)": {"@includeResource": "/include-res.json"},
				"key2": "@fmarker: ckey2"
			}
		</template>
		<expectedResult>
			{
				"key1": "cval1",
				"skey1": "cval1",
				"arr": [1, 2, 3, 4],
				"key2": "cval2"
			}
		</expectedResult>
	</jel-test-bean>

	<jel-test-bean name="includeWithReplaceAndCond">
		<context>
			{
				"ckey1": "cval1",
				"ckey2": "cval2"
			}
		</context>

		<template>
			{
				"key1": "@fmarker: ckey1",
				"@replace(wrongCond)": {
					"@condition": "ckey1 == 'diffValue'",
					"@includeResource": "/include-res.json"
				},
				"@replace(rightCond)": {
					"@condition": "ckey1 == 'cval1'",
					"@includeResource": "/include-res2.json",
					"@params": {
						"paramKey1": "paramValue"
					}
				},
				"key2": "@fmarker: ckey2"
			}
		</template>
		<expectedResult>
			{
				"key1": "cval1",
				"skey2": "fromRes2",
				"arr2": [1, 2, 3, 4],
				"pkey": "paramValue",
				"key2": "cval2"
			}
		</expectedResult>
	</jel-test-bean>

	<jel-test-bean name="includeResourceInArray">
		<context>
			{
				"ckey1": "cval1",
				"ckey2": "cval2"
			}
		</context>

		<template>
			["1", {"@includeResource": "/include-res.json"}, {"k1": "v1"}]
		</template>
		<expectedResult>
			["1", {"skey1": "cval1", "arr": [1, 2, 3, 4]}, {"k1": "v1"}]
		</expectedResult>
	</jel-test-bean>

	<jel-test-bean name="includeFile">
		<context>
			{
				"ckey1": "cval1",
				"ckey2": "cval2"
			}
		</context>

		<template>
			{
				"key1": "@fmarker: ckey1",
				"extra": {"@includeFile": "./src/test/resources/include-file.json"},
				"key2": "@fmarker: ckey2"
			}
		</template>
		<expectedResult>
			{
				"key1": "cval1",
				"extra": ["cval1", [1, 2, 3, 4]],
				"key2": "cval2"
			}
		</expectedResult>
	</jel-test-bean>

	<jel-test-bean name="includeRecursively">
		<context>
			{
				"ckey1": "cval1"
			}
		</context>

		<template>
			{
				"mainMap": {
					"@includeResource": "/include-recursive.json",
					"@params": {"value": "@fmarker: 3"}
				},
				"ckey1": "@fmarker: ckey1"
			}
		</template>
		<expectedResult>
			{
				"mainMap": {
					"smap": {
						"smap": {"finalValue": 2},
						"finalValue": 4
					},
					"finalValue": 6
				},
				"ckey1": "cval1"
			}
		</expectedResult>
	</jel-test-bean>
</test-data>