<testData xmlns:ccg="/fw/ccg/XMLBeanParser" xmlns:wrap="/fw/ccg/XMLBeanParser/wrap">
	<function name="condSimpleGroup">
		<ccg:if condition="attr.returnFlag??">
			<ccg:set expression="ifExec">
				<value>
					string: returnFlag: ${attr.returnFlag}
				</value>
			</ccg:set>
		
			<ccg:return/>
		</ccg:if>
	
		<ccg:if condition="attr.flag == 1">
			<then>
				<ccg:set expression="ifExec" value="if-then"/>
			</then>
		
			<else>
				<ccg:set expression="ifExec" value="if-else"/>
			</else>
		</ccg:if>
	</function>

	<testSuite name="lang-test-suites">
		<testCase name="testExpressions">
			<description>
				Tests expressions are replaced in test suite files properly
			</description>
		
			<ccg:set expression="testAttr" value="SimpleValue"/>
		
			<ccg:set expression="testAttr2" value="string: Value: #{test.app.prop}"/>
		
			<ccg:set expression="testAttr3">
				<value>
					string: Value: #{test.app.prop} ${attr.testAttr}
				</value>
			</ccg:set>
		
			<ccg:set expression="testAttr4">
				<value>
					string: Value: ${attr.testAttr + ' #{test.app.prop}'}
				</value>
			</ccg:set>
		
			<ccg:assert-equals actual="attr: testAttr2" expected="string: Value: TestValue"/>
		
			<ccg:assert-equals actual="attr: testAttr3" expected="string: Value: TestValue SimpleValue"/>
		
			<ccg:assert-equals actual="attr: testAttr4" expected="string: Value: SimpleValue TestValue"/>
		</testCase>
	
		<testCase name="testIfThenCondition">
			<description>
				Tests if condition "then" is working
			</description>
		
			<wrap:steps>
				<ccg:set expression="flag" value="int: 1"/>
			
				<ccg:function-ref name="condSimpleGroup"/>
			
				<ccg:assert-equals actual="attr: ifExec" expected="if-then"/>
			</wrap:steps>
		</testCase>
	
		<testCase name="testReturn">
			<description>Tests return step</description>
		
			<wrap:steps>
				<ccg:set expression="returnFlag" value="true"/>
			
				<ccg:set expression="ifExec" value="test"/>
			
				<ccg:function-ref name="condSimpleGroup"/>
			
				<ccg:remove name="returnFlag"/>
			
				<ccg:assert-equals actual="attr: ifExec" expected="string: returnFlag: true"/>
			</wrap:steps>
		</testCase>
	
		<testCase name="testIfElseCondition">
			<description>
				Tests if condition "else" is working
			</description>
		
			<wrap:steps>
				<ccg:set expression="flag" value="int: 2"/>
			
				<ccg:function-ref name="condSimpleGroup"/>
			
				<ccg:assert-equals actual="attr: ifExec" expected="if-else"/>
			</wrap:steps>
		</testCase>
	
		<testCase name="testSimpleFor">
			<description>
				Tests if for loop is working properly
			</description>
		
			<wrap:steps>
				<ccg:set expression="res" value=""/>
			
				<ccg:for end="5" start="1">
					<ccg:set expression="res" value="${attr.res}|${attr.loopVar}"/>
				</ccg:for>
			
				<ccg:assert-equals actual="attr: res" expected="|1|2|3|4|5"/>
			</wrap:steps>
		</testCase>
	
		<testCase name="testForWithBreanAndContinue">
			<description>
				Tests if for loop is working properly with break and continue
			</description>
		
			<wrap:steps>
				<ccg:set expression="res" value=""/>
			
				<ccg:for end="20" start="1">
					<ccg:if condition="attr.loopVar % 2 != 0">
						<ccg:continue/>
					</ccg:if>
				
					<ccg:set expression="res" value="${attr.res}|${attr.loopVar}"/>
				
					<ccg:if condition="attr.loopVar gte 10">
						<ccg:break/>
					</ccg:if>
				</ccg:for>
			
				<ccg:assert-equals actual="attr: res" expected="|2|4|6|8|10"/>
			</wrap:steps>
		</testCase>
	
		<testCase name="testSimpleWhileLoop">
			<description>
				Tests if simple while loop working
			</description>
		
			<wrap:steps>
				<ccg:set expression="i" value="int: 1"/>
			
				<ccg:set expression="res" value=""/>
			
				<ccg:while condition="attr.i lt 5">
					<ccg:set expression="res" value="${attr.res}|${attr.i}"/>
				
					<ccg:set expression="i" value="int: ${attr.i + 1}"/>
				</ccg:while>
			
				<ccg:assert-equals actual="attr: res" expected="|1|2|3|4"/>
			</wrap:steps>
		</testCase>
	
		<testCase name="testWhileLoopWithBranAndContinue">
			<description>
				Tests if while loop working with break and continue
			</description>
		
			<wrap:steps>
				<ccg:set expression="i" value="int: 0"/>
			
				<ccg:set expression="res" value=""/>
			
				<ccg:while condition="attr.i lt 20">
					<ccg:set expression="i" value="int: ${attr.i + 1}"/>
				
					<ccg:if condition="attr.i % 2 != 0">
						<ccg:continue/>
					</ccg:if>
				
					<ccg:set expression="res" value="${attr.res}|${attr.i}"/>
				
					<ccg:if condition="attr.i gte 10">
						<ccg:break/>
					</ccg:if>
				</ccg:while>
			
				<ccg:assert-equals actual="attr: res" expected="|2|4|6|8|10"/>
			</wrap:steps>
		</testCase>
	
		<!--
			=======================================================
			For Each loop test cases
			===================================================================
		-->
		<testCase name="testSimpleForEachLoopWithStr">
			<description>
				Tests if simple for-each loop working with string
			</description>
		
			<wrap:steps>
				<ccg:set expression="loopExpr" value="a,b,  c, d,e, f"/>
			
				<ccg:set expression="res" value=""/>
			
				<ccg:forEach expression="attr: loopExpr">
					<ccg:set expression="res" value="${attr.res}|${attr.loopVar}"/>
				</ccg:forEach>
			
				<ccg:assert-equals actual="attr: res" expected="|a|b|c|d|e|f"/>
			</wrap:steps>
		</testCase>
	
		<testCase name="testSimpleForEachLoopWithList">
			<description>
				Tests if simple for-each loop working with list
			</description>
		
			<wrap:steps>
				<ccg:set expression="res" value=""/>
			
				<ccg:forEach expression="prop: data.dataList">
					<ccg:set expression="res" value="${attr.res}|${attr.loopVar}"/>
				</ccg:forEach>
			
				<ccg:assert-equals actual="attr: res" expected="|a|b|c"/>
			</wrap:steps>
		</testCase>
	
		<data-bean ccg:beanType="java.util.ArrayList" id="dataList">
			<ccg:element>a</ccg:element>
		
			<ccg:element>b</ccg:element>
		
			<ccg:element>c</ccg:element>
		</data-bean>
	
		<testCase name="testSimpleForEachLoopWithList">
			<description>
				Tests if simple for-each loop working with list
			</description>
		
			<wrap:steps>
				<ccg:set expression="res" value=""/>
			
				<ccg:forEach expression="prop: data.dataList">
					<ccg:set expression="res" value="${attr.res}|${attr.loopVar}"/>
				</ccg:forEach>
			
				<ccg:assert-equals actual="attr: res" expected="|a|b|c"/>
			</wrap:steps>
		</testCase>
	
		<data-bean ccg:beanType="java.util.HashMap" id="dataMap">
			<ccg:entry key="key1">Value1</ccg:entry>
		
			<ccg:entry key="key2">Value2</ccg:entry>
		
			<ccg:entry key="key3">Value3</ccg:entry>
		</data-bean>
	
		<testCase name="testSimpleForEachLoopWithMap">
			<description>
				Tests if simple for-each loop working with Map
			</description>
		
			<wrap:steps>
				<ccg:set expression="res" value=""/>
			
				<ccg:forEach expression="prop: data.dataMap">
					<ccg:set expression="res" value="${attr.res}|${attr.loopVar.key}=${attr.loopVar.value}"/>
				</ccg:forEach>
			
				<ccg:assert-equals actual="attr: res" expected="|key1=Value1|key2=Value2|key3=Value3"/>
			</wrap:steps>
		</testCase>
	
		<testCase name="testForEachLoopWithBreakAndContinue">
			<description>
				Tests if for-each loop working with break and continue
			</description>
		
			<wrap:steps>
				<ccg:set expression="loopExpr" value="a,b,  c, d,e, f"/>
			
				<ccg:set expression="res" value=""/>
			
				<ccg:forEach expression="attr: loopExpr">
					<ccg:if condition="attr.loopVar == 'b'">
						<ccg:continue/>
					</ccg:if>
				
					<ccg:set expression="res" value="${attr.res}|${attr.loopVar}"/>
				
					<ccg:if condition="attr.loopVar == 'e'">
						<ccg:break/>
					</ccg:if>
				</ccg:forEach>
			
				<ccg:assert-equals actual="attr: res" expected="|a|c|d|e"/>
			</wrap:steps>
		</testCase>
	
		<testCase name="testPollAndCheck">
			<description>
				Ensures polling step works properly
			</description>
		
			<ccg:set expression="checkVar" value="int: 0"/>
		
			<ccg:pollAndCheck checkCondition="attr.checkVar gte 5" pollingInterval="500" timeOut="20" timeOutUnit="SECONDS">
				<poll>
					<ccg:set expression="checkVar" value="int: ${attr.checkVar + 1}"/>
				</poll>
			</ccg:pollAndCheck>
		</testCase>
	
		<testCase name="testTimerAndSummaryMssg">
			<description>
				Tests timer step and summary message
			</description>
		
			<ccg:startTimer name="timeTaken"/>
		
			<ccg:sleep time="10" timeUnit="SECONDS"/>
		
			<ccg:stopTimer name="timeTaken"/>
		
			<ccg:log level="SUMMARY" message="Time taken during test was: ${attr.timeTaken}"/>
		
			<ccg:assert-not-null value="attr.timeTaken"/>
		</testCase>
	
		<function name="factorialGroup1">
			<ccg:if condition="param.value lt 2">
				<then>
					<ccg:set expression="result" value="int: 1"/>
					<ccg:return/>
				</then>
				<else>
					<ccg:log message="Executing factorial for ${param.value}"/>
				</else>
			</ccg:if>
		
			<ccg:function-ref name="factorialGroup1">
				<param name="value" value="int: ${param.value - 1}"/>
			</ccg:function-ref>
		
			<ccg:set expression="result" value="int: ${param.value * attr.result}"/>
		</function>
	
		<testCase name="testGroupRecursion">
			<description>
				Tests recursion working within the group
			</description>
		
			<ccg:function-ref name="factorialGroup1">
				<param name="value" value="int: 4"/>
			</ccg:function-ref>
		
			<ccg:assert-equals actual="attr: result" expected="int: 24"/>
		</testCase>
	
		<testCase name="testExecute">
			<description>Tests execute step</description>
		
			<ccg:set expression="checkVar" value="int: 1"/>
		
			<ccg:function-ref name="factorialGroup1">
				<param name="value" value="int: 4"/>
			</ccg:function-ref>
		
			<ccg:assert-equals actual="attr: result" expected="int: 24"/>
		</testCase>
	
		<testCase name="testCaseSetupCleanup">
			<description>
				Ensures test case setup/cleanup is getting executed as expected.
			</description>
		
			<setup>
				<ccg:set expression="setupVar" value="int: 1"/>
			</setup>
		
			<wrap:steps>
				<ccg:set expression="setupVar" value="int: ${attr.setupVar + 1}"/>
			
				<ccg:assert-equals actual="attr: setupVar" expected="int: 2"/>
			</wrap:steps>
		
			<cleanup>
				<ccg:set expression="setupVar" value="int: 10"/>
			</cleanup>
		</testCase>
	
		<testCase dependencies="testCaseSetupCleanup" name="testCaseSetupCleanup_cleanupCheck">
			<description>
				Ensures cleanup is executed at end of testCaseSetupCleanup
			</description>
		
			<wrap:steps>
				<ccg:assert-equals actual="attr: setupVar" expected="int: 10"/>
			</wrap:steps>
		</testCase>
	</testSuite>
</testData>